
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-3.8.5/lib/site_template/404/",
    "title": "",
    "body": " 404 Page not found :(  The requested page could not be found. "
    }, {
    "id": 1,
    "url": "http://localhost:4000/mediumish-theme-jekyll/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 2,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-sitemap-1.2.0/spec/fixtures/404/",
    "title": "",
    "body": " That’s an error. "
    }, {
    "id": 3,
    "url": "http://localhost:4000/mediumish-theme-jekyll/about",
    "title": "Mediumish Template for Jekyll",
    "body": "This website is built with Jekyll and Mediumish template for Jekyll. It's for demonstration purposes, no real content can be found. Mediumish template for Jekyll is compatible with Github pages, in fact even this demo is created with Github Pages and hosted with Github.  Documentation: Please, read the docs here. Questions or bug reports?: Head over to our Github repository! Buy me a coffeeThank you for your support! Your donation helps me to maintain and improve Mediumish . Buy me a coffee Documentation"
    }, {
    "id": 4,
    "url": "http://localhost:4000/mediumish-theme-jekyll/about/",
    "title": "About",
    "body": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb. com You can find the source code for Minima at GitHub:jekyll /minima You can find the source code for Jekyll at GitHub:jekyll /jekyll "
    }, {
    "id": 5,
    "url": "http://localhost:4000/mediumish-theme-jekyll/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 6,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/documentation.page",
    "title": "Documentation",
    "body": "kramdown DocumentationOverview: kramdown is first and foremost a library for converting text written in a superset of Markdown toHTML. However, due to its modular architecture it is able to support additional input and outputformats. The following input and output formats are currently supported:    Input: kramdown (a superset of Markdown),Markdown, Github Flavored Markdown, HTML     Output: HTML, LaTeX,kramdown, RemoveHtmlTags (a specialconverter which removes HTML tags, normally used in conjunction with the LaTeX or kramdownconverters)  The kramdown syntax page describes in detail what is supported and how it differsfrom standard Markdown. For all available options have a look at the options documentation or have a look ata parser/converter page to see which options they support! Usage: The kramdown package provides two ways for using it:    As a library   kramdown uses basically the same API as [RedCloth], [BlueCloth] and [Maruku]:   123require 'kramdown'puts Kramdown::Document. new(text). to_html    The second parameter to the new call is an options hash for (de)activating certain features. Forexample, to disable automatic header ID generation, you can do the following:   1puts Kramdown::Document. new(text, :auto_ids =&gt; false). to_html    The default parser used is kramdown, however, you can select a different one with the :inputoption:   1puts Kramdown::Document. new(text, :input =&gt; 'html'). to_latex    You can also reuse the created document object to produce multiple outputs:   123doc = Kramdown::Document. new(text, :input =&gt; 'html')puts doc. to_htmlputs doc. to_latex    More information on how to use or extend kramdown can be found in the APIdocumentation!     As an application   Together with the library files a binary called kramdown is shipped which can be used to converttext in any supported input format to any supported output format. It either reads from the filesspecified as the command line arguments or from the standard input. For example:   1kramdown path/to/kramdown/doc/syntax. page    The input and output formats as well as all available kramdown options are supported throughcommand line switches.  Tests: kramdown uses various test suites to verify the correct working of the parsers and converters. Formore information, have a look at the tests document. {include_file: doc/links. markdown} "
    }, {
    "id": 7,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/liquid-4.0.1/lib/liquid/locales/en.yml",
    "title": "",
    "body": "errors:  syntax:   tag_unexpected_args: “Syntax Error in ‘%{tag}’ - Valid syntax: %{tag}”   assign: “Syntax Error in ‘assign’ - Valid syntax: assign [var] = [source]”   capture: “Syntax Error in ‘capture’ - Valid syntax: capture [var]”   case: “Syntax Error in ‘case’ - Valid syntax: case [condition]”   case_invalid_when: “Syntax Error in tag ‘case’ - Valid when condition: “   case_invalid_else: “Syntax Error in tag ‘case’ - Valid else condition: (no parameters) “   cycle: “Syntax Error in ‘cycle’ - Valid syntax: cycle [name :] var [, var2, var3 …]”   for: “Syntax Error in ‘for loop’ - Valid syntax: for [item] in [collection]”   for_invalid_in: “For loops require an ‘in’ clause”   for_invalid_attribute: “Invalid attribute in for loop. Valid attributes are limit and offset”   if: “Syntax Error in tag ‘if’ - Valid syntax: if [expression]”   include: “Error in tag ‘include’ - Valid syntax: include ‘[template]’ (with|for) [object|collection]”   unknown_tag: “Unknown tag ‘%{tag}’”   invalid_delimiter: “’%{tag}’ is not a valid delimiter for %{block_name} tags. use %{block_delimiter}”   unexpected_else: “%{block_name} tag does not expect ‘else’ tag”   unexpected_outer_tag: “Unexpected outer ‘%{tag}’ tag”   tag_termination: “Tag ‘%{token}’ was not properly terminated with regexp: %{tag_end}”   variable_termination: “Variable ‘%{token}’ was not properly terminated with regexp: %{tag_end}”   tag_never_closed: “’%{block_name}’ tag was never closed”   meta_syntax_error: “Liquid syntax error: #{e. message}”   table_row: “Syntax Error in ‘table_row loop’ - Valid syntax: table_row [item] in [collection] cols=3”  argument:   include: “Argument error in tag ‘include’ - Illegal template name” "
    }, {
    "id": 8,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/liquid-4.0.1/test/fixtures/en_locale.yml",
    "title": "",
    "body": "simple: “less is more” whatever: “something %{something}” errors:  i18n:   undefined_interpolation: “undefined key %{key}”   unknown_translation: “translation ‘%{name}’ wasn’t found”  syntax:   oops: “something wasn’t right” "
    }, {
    "id": 9,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-sitemap-1.2.0/spec/fixtures/some-subfolder/exclude-this-page/",
    "title": "",
    "body": "Exclude this page "
    }, {
    "id": 10,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-3.8.5/lib/theme_template/example/",
    "title": "",
    "body": "Lorem ipsum dolor sit amet, quo id prima corrumpit pertinacia, id ius dolor dolores, an veri pertinax explicari mea. Agam solum et qui, his id ludus graeco adipiscing. Duis theophrastus nam in, at his vidisse atomorum. Tantas gloriatur scripserit ne eos. Est wisi tempor habemus at, ei graeco dissentiet eos. Ne usu aliquip sanctus conceptam, te vis ignota animal, modus latine contentiones ius te. Howto propoerly delete an element from a slice in Go: Properly delete an element from a slice in GoHow to increase Travis CI timeout?: There are different use cases where Travis jobs could raise the timeout error. Maybe you are trying to install a Python module that takes some time before installing the dependencies e. g: Author Reference: 错误: 错误: 错误: Stuck In The Middle: Author Detail: Pre: Line 1Line 2Line 3Liquid: Liquid is rendered. The plugin will properly strip newlines. : Jekyll Last Modified At: Please don’t modify this file. It’s modified time is important. Jekyll Last Modified At: Please don’t modify this file. It’s modified time is important. Oh Yes: Whateva: Hey There: Humor: Bleh: Blah: Exclude This Post: This post should not appear in the sitemap. March The Fourth: March the fourth! March The Fourth: March the fourth! March The Second: March the second! March The Second: March the second! Dec The Second: December the twelfth, actually. Dec The Second: FooTe falli veritus sea, at molestiae scribentur deterruisset vix, et mea zril phaedrum vulputate. No cum dicit consulatu. Ut has nostro noluisse expetendis, te pro quaeque disputando, eu sed summo omnes. Eos at tale aperiam, usu cu propriae quaestio constituto, sed aperiam erroribus temporibus an. Quo eu liber mediocritatem, vix an delectus eleifend, iuvaret suscipit ei vel. Partem invenire per an, mea postulant dissentias eu, ius tantas audire nominavi eu. Dicunt tritani veritus ex vis, mei in case sententiae. At exerci democritum nam, cu lobortis iracundia mei. Alia eligendi consectetuer eu sed, paulo docendi noluisse sit ex. "
    }, {
    "id": 11,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-paginate-1.1.0/spec/source/contacts/",
    "title": "",
    "body": ""
    }, {
    "id": 12,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-paginate-1.1.0/spec/source/",
    "title": "",
    "body": ""
    }, {
    "id": 13,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-sitemap-1.2.0/spec/fixtures/",
    "title": "",
    "body": "HERE IS MY SITE I AM SO EXCITED TO BE USING GITHUB PAGES "
    }, {
    "id": 14,
    "url": "http://localhost:4000/mediumish-theme-jekyll/",
    "title": "Home",
    "body": "      Featured:                                                                                                                                                                                                           Howto propoerly delete an element from a slice in Go                                                 1 2 3 4 5                                              :               Properly delete an element from a slice in Go:                                                                                                                                                                                                       15 Jul 2020                                                                                                                                                                                                                                                                                                                  How to increase Travis CI timeout?                                                 1 2 3 4 5                                              :               There are different use cases where Travis jobs could raise the timeout error. Maybe you are trying to install a Python module that takes some. . . :                                                                                                                                                                                                       11 Jan 2018                                                                                                                                                                                                                                                                      All Stories:                                                                                                     Howto propoerly delete an element from a slice in Go                         1 2 3 4 5                      :       Properly delete an element from a slice in Go:                                                                                               15 Jul 2020                                                                                                                                     How to increase Travis CI timeout?                         1 2 3 4 5                      :       There are different use cases where Travis jobs could raise the timeout error. Maybe you are trying to install a Python module that takes some time before installing the dependencies. . . :                                                                                               11 Jan 2018                                                                                            Author Reference              :       :                                                                                               25 Apr 2016                                                                                            错误              :       :                               03 Apr 2016        &lt;/span&gt;                                                                                    错误              :       :                               02 Apr 2016        &lt;/span&gt;                                                                                    错误              :       :                               01 Apr 2016        &lt;/span&gt;                                       &laquo; Prev       1        2        3        4        5      Next &raquo; "
    }, {
    "id": 15,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-3.8.5/lib/site_template/",
    "title": "",
    "body": ""
    }, {
    "id": 16,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/index.page",
    "title": "Home",
    "body": "Overview: If you want to get started with kramdown, have a look at the installation pageto see how you can install it on your system. Then look through thedocumentation for finding information about how to actually use kramdown andits parsers/converters. The quick reference provides a overview of the syntax – ifyou need a more detailed description of the superset of Markdown which kramdown supports the syntaxpage is the place to go! {tikz::path: overview. pngimg_attr: {style: ‘background:transparent’}content_processor. tikz. libraries: [mindmap, trees, arrows]content_processor. tikz. transparent: truecontent_processor. tikz. resolution: 300 100content_processor. tikz. opts: | mindmap, concept color=black, text=white, root concept/. append style={font=\Large}, level 1 concept/. append style={font=\Large, minimum size=2. 6cm}, level 2 concept/. append style={font=\Large},}\node[concept, font=\Large] (lib) {kramdown’s internal representation} child[concept color=orange, grow=120, -&gt;] {node[concept] (i-kramdown) {kramdown}} child[concept color=orange, grow=160] {node[concept] (i-html) {HTML}} child[concept color=orange, grow=200] {node[concept] (i-gfm) {GFM}} child[concept color=orange, grow=240] {node[concept] (i-markdown) {Markdown}} child[concept color=green!50!black, grow=60] {node[concept] (o-html) {HTML}} child[concept color=green!50!black, grow=20] {node[concept] (o-kramdown) {kramdown}} child[concept color=green!50!black, grow=-20] {  node[concept] (o-latex) {\LaTeX}  child[grow=0] {   node[concept] (o-latex-pdf) {PDF}  } } child[concept color=green!50!black, grow=-60] {node[concept] (o-pdf) {PDF}};\draw [dash pattern=on 0pt off 2pt,line width=5pt,arrows=-angle 60,shorten &gt;=15pt,shorten &lt;=10pt,color=orange]  (i-kramdown) edge(lib)  (i-markdown) edge(lib)  (i-html) edge (lib)  (i-gfm) edge (lib);\draw [dash pattern=on 0pt off 2pt,line width=5pt,arrows=-angle 60,shorten &gt;=10pt,shorten &lt;=15pt,color=green!50!black]  (lib) edge(o-html)  (lib) edge (o-kramdown)  (lib) edge (o-latex)  (lib) edge (o-pdf);{tikz} Bugs, Forums, Mailing Lists: If you have found a bug, you should report it here. Also, there is the kramdown-usersgoogle group available if you have any questions! Thanks: kramdown would not be possible without the prior work of many other people. I want to thank everyoneinvolved with making Markdown such a nice markup language and especially the developers of otherMarkdown implementations because kramdown borrowed many ideas from existing packages. Author:  Thomas Leitner e-Mail: t_leitner@gmx. at— intro     kramdown (sic, not Kramdown or KramDown, just kramdown) is a freeMIT-licensedRuby library for parsing and converting a superset of Markdown. It iscompletely written in Ruby, supports standard Markdown (with some minor modifications) and variousextensions that have been made popular by the PHP Markdown Extra package and Maruku.  It is probably the fastest pure-Ruby Markdown converter available (September 2014), being about 3xfaster than Maruku and about 4. 5x faster than BlueFeather.  Version 1. 17. 0 released on2018-05-31, more news Support kramdown development and become a patron!"
    }, {
    "id": 17,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/installation.page",
    "title": "Installation",
    "body": "Download &amp; InstallationDependencies: Since kramdown is written in Ruby, you just need the Ruby interpreter,version 2. x. There are no other dependencies. Compatibility Notes: kramdown should work on any platform which supports Ruby. It has been successfully tested on thefollowing platforms:  Linux with Ruby 2. x and jruby 9. 0. 0. 0. See the platform specific installation notes for more information! Platform Specific Installation Instructions: Linux: You need to make sure that Ruby is installed. If it isn’t, consult the documentation of the Linuxdistribution you are using on how to install it. For example, in case of Ubuntu 17. 10 (this shouldprobably also work for any newer Ubuntu version or any recent Debian based distribution) all youneed to do is: 1sudo apt-get install rubyOnce you have Ruby installed, you need to execute the following command to install kramdown: 1sudo gem install kramdownMac OS X: Mac OS X Snow Leopard comes with Ruby and Rubygems preinstalled. So installing kramdown is as easyas running: 1sudo gem install kramdownWindows: You need to install Ruby first. This can easily be done by using the RubyInstaller - just downloadthe installation binary and run it. After that open a command shell (select Start -&gt; Run. . . , thenenter cmd and click on Ok) and type in the following: 1gem install kramdownGeneric Installation Instructions: Using Rubygems: If you are using Rubygems, installing the latest version of kramdown is as simple as executing 1gem install kramdownManual Installation: The latest version of kramdown can always be downloaded as . tar. gz or . zip via the Githubreleases page. After the download the package needs to be decompressed and then you caninstall kramdown using the included setup. rb installation method: 123$ ruby setup. rb config$ ruby setup. rb setup$ ruby setup. rb installUsing the repository version: kramdown uses git as its versioning system and kramdown’s repository is hosted on GitHub. Therepository always contains a clean state of the current development version of kramdown. To checkout kramdown use the following command: 1 git clone git://github. com/gettalong/kramdown. git"
    }, {
    "id": 18,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/safe_yaml-1.0.5/spec/issue48.txt",
    "title": "Blah",
    "body": "I’m going to inject a bunch of YAML-looking stuff below and it should all just get ignored. foo: bar  foo bar:foo42~ text: | Look, I’m another YAML document!— "
    }, {
    "id": 19,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/news.feed",
    "title": "",
    "body": "title: kramdown Newsdescription: kramdown - a fast, pure Ruby Markdown-superset converterauthor: Thomas Leitnerauthor_url: https://kramdown. gettalong. orgentries: {alcn: news/*. html, sort: sort_info, reverse: true, limit: 10}versions: atom: "
    }, {
    "id": 20,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/news.page",
    "title": "",
    "body": "title: Newsin_menu: falsesort_info: 30— pipeline:tags,blocks,fragments NewsAtom-Feed — name:newsdata pipeline:erb&lt;%opts = {:alcn =&gt; ‘/news/*. html’, :sort =&gt; ‘sort_info’, :reverse =&gt; true, :flatten =&gt; true}context. website. ext. item_tracker. add(context. dest_node, :nodes, :node_finder_option_set, {:opts =&gt; opts, :ref_alcn =&gt; context. node. alcn}, :content)context. website. ext. node_finder. find(opts, context. node). each do |node| # context. options[‘contentprocessor. kramdown. options’] = {:auto_id_prefix =&gt; node. lcn. tr(‘. ’, ‘-‘)}%&gt;  Published on &lt;%= node['created_at']. strftime( %A, %d %B %Y ) %&gt;&lt;%= context. render_block(:name =&gt; 'content', :chain =&gt; [node]) %&gt;&lt;% end %&gt; "
    }, {
    "id": 21,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/options.page",
    "title": "Options",
    "body": "Options: The behaviour of kramdown can be adjusted via the available options. Options can be specified in multiple ways:  On the command line The kramdown binary allows setting any option by using command line switches.   For example, the following command will disable automatic header ID generation and defines thefirst footnote number as 5:   1$ kramdown --no-auto-ids --footnote-nr 5    As you can see all underscores in option names have to be replaced with dashes. The built-in helpof the binary as well as the man-page show all available options.   Within a kramdown document By using the special extension syntax, it is possible to set options within a document.   Using the above example, the options would be set like this within a document:   1{::options auto_ids= false  footnote_nr= 5  /}    Using Ruby code   If you are using kramdown as a library, you can pass any options as second parameter to theKramdown::Document. new method.   Again, using the above example you would initalize the kramdown document class as follows:   1Kramdown::Document. new(source_text, \{auto_ids: false, footnote_nr: 5})   Available Options: Below is a list of all currently available options. Have a look at the documentation of a converteror parser to see directly which options they support! {options: {items: all}} "
    }, {
    "id": 22,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-sitemap-1.2.0/spec/fixtures/jekyll-last-modified-at/page/",
    "title": "",
    "body": "This is a page with a modified time. "
    }, {
    "id": 23,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/quickref.page",
    "title": "",
    "body": "title: Quick Referencein_menu: truesort_info: 9— name:sidebar Become a Patron!Contents{menu: {options: {descendants: true, levels: [2,6]}}}— name:content Quick ReferenceBelow are examples of all available structural elements that can be used in a kramdown text. Sincethe kramdown syntax is a superset of the Markdown syntax, only a small part of the available syntaxis not available in standard Markdown syntax. Note, that only the most basic syntax information isgiven. However, a link to the detailed syntax for each element is provided (which also details thedifferences to the standard Markdown syntax). The quick reference is for version &lt;%=::Kramdown::VERSION %&gt; of the syntax documentation. kramdown has two main classes of elements: block and span-level elements. Block-level elements areused to create paragraphs, headers, lists and so on whereas span-level elements are used to markuptext phrases as emphasized, as a link and so on. All examples below feature the kramdown source, the converted HTML source (shown when hovering overthe kramdown source) and the output as it appears in the browser. This looks like this: kramdown example codeExample code converted to HTMLLive browser view of example codeBlock-level Elements - Main Structural ElementsParagraphs: {kdlink: {oid: paragraphs, part: “paragraphs”}} Consecutive lines of text are considered to be one paragraph. As with other block level elements youhave to add a blank line to separate it from the following block-level element: {kdexample::}The first paragraph. Another paragraph{kdexample} Explicit line breaks in a paragraph can be made by using two spaces or two backslashes at the end of a line: {kdexample::}This is a paragraphwhich contains a hard line break. {kdexample} Headers: {kdlink: {oid: headers, part: “headers”}} kramdown supports Setext style headers and atx style headers. A header must always be preceded by ablank line except at the beginning of the document: {kdexample::}First level header================== Second level header: {kdexample} {kdexample::} H1 headerH2 header: H3 header: H4 header: H5 headerH6 header{kdexample} If you set the option auto_ids to false (for example, by using the options extension, seeExtensions), then the automatic header ID generation is turned off: {kdexample::} A header without an ID{kdexample} Blockquotes: {kdlink: {oid: blockquotes, part: “blockquotes”}} A blockquote is started using the &gt; marker followed by an optional space; all following lines thatare also started with the blockquote marker belong to the blockquote. You can use any block-levelelements inside a blockquote: {kdexample::}  A sample blockquote.    Nested blockquotes arealso possible.   Headers work too:  This is the outer quote again. {kdexample} You may also be lazy with the &gt; markers as long as there is no blank line: {kdexample::}  This is a blockquotecontinued on thisand this line. But this is a separate paragraph. {kdexample} Code Blocks: {kdlink: {oid: code-blocks, part: “code blocks”}} kramdown supports two different code block styles. One uses lines indented with either four spacesor one tab whereas the other uses lines with tilde characters as delimiters – therefore the contentdoes not need to be indented: {kdexample::}  This is a sample code block. 1Continued here. {kdexample}{kdexample::} 1234This is also a code block. ~~~Ending lines must have at least asmany tildes as the starting line. {kdexample} The following is a code block with a language specified: {kdexample::} 123def what? 42end{kdexample} Horizontal Rules: {kdlink: {oid: horizontal-rules, part: “horizontal rules”}} It is easy to insert a horizontal rule in kramdown: just use three or more asterisks, dashes orunderscores, optionally separated by spaces or tabs, on an otherwise blank line: {kdexample::} -– {kdexample} Lists: {kdlink: {oid: lists, part: “lists”}} kramdown supports ordered and unordered lists. Ordered lists are started by using a number followedby a period, a space and then the list item text. The content of a list item consists of block-levelelements. All lines which have the same indent as the text of the line with the list marker belongto the list item: {kdexample::}  This is a list item And another item And the third onewith additional text{kdexample}As with block quotes, you may be lazy when using the list item marker: {kdexample::}  A list itemwith additional text{kdexample}As the content consists of block-level elements you can do things like the following: {kdexample::}    This is a list item      with a blockquote     And a header    Followed by another item{kdexample}  Nested lists are also easy to create: {kdexample::}  Item one     sub item one   sub item two   sub item three    Item two{kdexample}Lists can occur directly after other block-level elements, however, there has to be at least oneblank line if you want to follow a paragraph with a list: {kdexample::}This is a paragraph.    This is NOT a list.     This is a list!{kdexample}  Unordered lists are started by using an asterisk, a dash or a plus sign (they can be mixed) and aspace. Apart from that unordered lists follow the same rules as ordered lists: {kdexample::}  Item one Item two Item three{kdexample}Definition Lists: {kdlink: {oid: definition-lists, part: “definition lists”}} A definition list works similar to a normal list and is used to associate definitions with terms. Definition lists are started when a normal paragraph is followed by a line starting with a colon andthen the definition text. One term can have many definitions and multiple terms can have the samedefinition. Each line of the preceding paragraph is assumed to contain one term, for example:  {kdexample::} term definition another definition another term and another term and a definition for the term{kdexample}If you insert a blank line before a definition (note: there must only be one blank line between theterms and the first definition), the definition will be wrapped in a paragraph:  {kdexample::} term   definition   definition{kdexample}Each term can be styled using span-level elements and each definition is parsed as block-levelelements, i. e. you can use any block-level in a definition. Just use the same indent for the linesfollowing the definition line:  {kdexample::} This is a term   This will be a para      a blockquote     A header  {kdexample}  Tables: {kdlink: {oid: tables, part: “tables”}} kramdown supports a syntax for creating simple tables. A line starting with a pipe character (|)starts a table row. However, if the pipe characters is immediately followed by a dash (-), aseparator line is created. Separator lines are used to split the table header from the table body(and optionally align the table columns) and to split the table body into multiple parts. If thepipe character is followed by an equal sign (=), the tables rows below it are part of the tablefooter. {kdexample::}| A simple | table || with multiple | lines|{kdexample} {kdexample::}| Header1 | Header2 | Header3 ||:——–|:——-:|——–:|| cell1  | cell2  | cell3  || cell4  | cell5  | cell6  ||—-| cell1  | cell2  | cell3  || cell4  | cell5  | cell6  ||=====| Foot1  | Foot2  | Foot3 {kdexample} HTML elements: {kdlink: {oid: html-blocks, part: “HTML blocks”}} kramdown allows you to use block-level HTML tags (div, p, pre, …) to markup whole blocks oftext – just start a line with a block-level HTML tag. kramdown syntax is normally not processedinside an HTML tag but this can be changed with the parse_block_html option. If this options isset to true, then the content of a block-level HTML tag is parsed by kramdown either as blocklevel or span-level text, depending on the tag: {kdexample::} Something that stays right and is not wrapped in a para.  This is wrapped in a para. This can contain only span level elements. {kdexample} Block Attributes: {kdlink: {oid: block-ials, part: “block IALs”}}{kdlink: {oid: attribute-list-definitions, part: “ALDs”}} You can assign any attribute to a block-level element. Just directly follow the block with a blockinline attribute list (or short: block IAL). A block IAL consists of a left curly brace, followedby a colon, the attribute definitions and a right curly brace. Here is a simple example which sets thetitle attribute of a block quote: {kdexample::}  A nice blockquote {kdexample} As one often wants to set one or more CSS classes on an element, there is an easy shortcut: {kdexample::}  A nice blockquote {kdexample} A shortcut for setting the ID is also provided. Just prefix the ID with a hash symbol: {kdexample::}  A nice blockquote {kdexample} Sometimes one wants to use the same attributes for many elements. kramdown allows you to define theattributes in one place with an attribute list definition (or short: ALD) and just reference thisdefinition in a block IAL. An ALD has the same structure as a block IAL but the colon has to bereplace with a colon, the reference name and another colon. By just using the reference name as-isin a block IAL, one can include the attributes of the referenced ALD: {kdexample::} paragraph {kdexample} The order in a block IAL or ALD is important because later defined attributes overwrite (with theexception of the shortcut for CSS classes) prior defined attributes: {kdexample::} paragraph {kdexample} Extensions: {kdlink: {oid: extensions, part: “extensions”}} kramdown provides some less used functionality through a common syntax. This will allow the easyaddition of other extensions if need arises. Currently, there are extensions for ignoring text (i. e. treating text as comment), for inserting arbitrary text as-is into the output and for settingkramdown options. Here is an example that shows how to insert comments into text: {kdexample::}This is a paragraph… paragraph continues here. Extensions can also be usedinline **see**!{kdexample} As one can see from the above example, the syntax for extensions is nearly identical to that ofALDs. However, there is no trailing colon after the extension name and the extension end tag needs aslash between the colon and the extension name. One can also use the short form of the end tag, i. e. {:/}. Attribute definitions can be specified on the start tag by separating them with a space fromthe extension name. Also, if the extension does not have a body, there needs to be a slash rightbefore the closing brace: {kdexample::} Header without id{kdexample} Span-Level Elements - Text ModifiersEmphasis: {kdlink: {oid: emphasis, part: “emphasis”}} Emphasis can be added to text by surrounding the text with either asterisks or underscores: {kdexample::}This is emphasized,this too!{kdexample} Strong emphasis can be done by doubling the delimiters: {kdexample::}This is strong,this too!{kdexample} The form with the asterisks can also be used to markup parts of words: {kdexample::}This works as expected!{kdexample} Links and Images: {kdlink: {oid: links-and-images, part: “links and images”}} A simple link can be created by surrounding the text with square brackets and the link URL withparentheses: {kdexample::}A linkto the kramdown homepage. {kdexample} You can also add title information to the link: {kdexample::}A linkto the homepage. {kdexample} There is another way to create links which does not interrupt the text flow. The URL and title aredefined using a reference name and this reference name is then used in square brackets instead ofthe link URL: {kdexample::}A linkto the homepage. {kdexample} If the link text itself is the reference name, the second set of square brackets can be omitted: {kdexample::}A link to the kramdown hp. {kdexample} Images can be created in a similar way: just use an exclamation mark before the square brackets. Thelink text will become the alternative text of the image and the link URL specifies the image source: {kdexample::}An image: {kdexample} Inline Code: {kdlink: {oid: code-spans, part: “code spans”}} Text phrases can be easily marked up as code by surrounding them with backticks: {kdexample::}Use Kramdown::Document. new(text). to_htmlto convert the text in kramdownsyntax to HTML. {kdexample} If you want to use literal backticks in your code, just use two or more backticks as delimiters. Thespace right after the beginning delimiter and the one right before the closing delimiter are ignored: {kdexample::}Use backticks to markup code,e. g. `code`. {kdexample} Footnotes: {kdlink: {oid: footnotes, part: “footnotes”}} Footnotes can easily be used in kramdown. Just set a footnote marker (consists of square bracketswith a caret and the footnote name inside) in the text and somewhere else the footnote definition (whichbasically looks like a reference link definition): {kdexample::}This is a text with afootnote1. {kdexample} The footnote definition can contain any block-level element, all lines following a footnotedefinition indented with four spaces or one tab belong to the definition: {kdexample::}This is a text with afootnote2. As can be seen above the footnote name is only used for the anchors and the numbering is doneautomatically in document order.  Repeated footnote markers will link to the same footnotedefinition. Abbreviations: {kdlink: {oid: abbreviations, part: “abbreviations”}} Abbreviations will work out of the box once you add an abbreviation definition. So you can justwrite the text and add the definitions later on. {kdexample::}This is an HTMLexample. {kdexample} HTML Elements: {kdlink: {oid: html-spans, part: “HTML spans”}} HTML is not only supported on the block-level but also on the span-level: {kdexample::}This is written inred. {kdexample} Inline Attributes: {kdlink: {oid: span-ials, part: “span IALs”}} As with a block-level element you can assign any attribute to a span-level elements using a spaninline attribute list (or short: span IAL). A span IAL has the same syntax as a block IAL and mustimmediately follow the span-level element: {kdexample::}This is red. {kdexample}       And here is the definition.  &#8617;        And here is the definition.        With a quote!{kdexample}       &#8617;    "
    }, {
    "id": 24,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/sitemap.sitemap",
    "title": "",
    "body": ""
    }, {
    "id": 25,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-3.8.5/lib/theme_template/example/style.css",
    "title": "",
    "body": "// Here, you can test out the Sass/SCSS that you include in your theme. // Simply @import the necessary file(s) to get the proper styles on the site. // E. g. ://  @import “a-file-from-my-theme”; "
    }, {
    "id": 26,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/syntax.page",
    "title": "",
    "body": "title: Syntaxin_menu: truesort_info: 10— name:sidebar Become a Patron!Contents{menu: {options: {descendants: true, levels: [2,6]}}}— name:content kramdown SyntaxThis is version &lt;%= ::Kramdown::VERSION %&gt; of the syntax documentation. The kramdown syntax is based on the Markdown syntax and has been enhanced with features that arefound in other Markdown implementations like [Maruku], [PHP Markdown Extra] and [Pandoc]. However,it strives to provide a strict syntax with definite rules and therefore isn’t completely compatiblewith Markdown. Nonetheless, most Markdown documents should work fine when parsed with kramdown. Allplaces where the kramdown syntax differs from the Markdown syntax are highlighted. Following is the complete syntax definition for all elements kramdown supports. Together with thedocumentation on the available converters, it is clearly specified what you will get when a kramdowndocument is converted. Source Text Formatting: A kramdown document may be in any encoding, for example ASCII, UTF-8 or ISO-8859-1, and the outputwill have the same encoding as the source. The document consists of two types of elements, block-level elements and span-level elements:    Block-level elements define the main structure of the content, for example, what part of the textshould be a paragraph, a list, a blockquote and so on.     Span-level elements mark up small text parts as, for example, emphasized text or a link.  Thus span-level elements can only occur inside block-level elements or other span-level elements. You will often find references to the “first column” or “first character” of a line in a block-levelelement descriptions. Such a reference is always to be taken relative to the current indentationlevel because some block-level elements open up a new indentation level (e. g. blockquotes). Thebeginning of a kramdown document opens up the default indentation level which begins at the firstcolumn of the text. Line Wrapping: Some lightweight markup syntax don’t work well in environments where lines are hard-wrapped. Forexample, this is the case with many email programs. Therefore kramdown allows content likeparagraphs or blockquotes to be hard-wrapped, i. e. broken across lines. This is sometimes referredto as “lazy syntax” since the indentation or line prefix required for the first line of content isnot required for the consecutive lines. Block-level elements that support line wrapping always end when one of the following conditions ismet:    a blank line, an EOB marker line, a block IAL or theend of the document (i. e. a block boundary),     or an HTML block.  Line wrapping is allowed throughout a kramdown document but there are some block-level elements thatdo not support being hard-wrapped:  headers   This is not an issue in most situations since headers normally fit on one line. If a header textgets too long for one line, you need to use HTML syntax instead.   fenced code blocks   The delimiting lines of a fenced code block do not support hard-wrapping. Since everything betweenthe delimiting lines is taken as is, the content of a fenced code block does also not supporthard-wrapping.   definition list terms   Each definition term has to appear on a separate line. Hard-wrapping would therefore introduceadditional definition terms. The definitions themselves, however, do support hard-wrapping.   tables   Since each line of a kramdown table describes one table row or a separator, it is not possible tohard-wrap tables.  Note that it is NOT recommended to use lazy syntax to write a kramdown document. Theflexibility that the kramdown syntax offers due to the issue of line wrapping hinders readabilityand should therefore not be used. Usage of Tabs: kramdown assumes that tab stops are set at multiples of four. This is especially important whenusing tabs for indentation in lists. Also, tabs may only be used at the beginning of a line whenindenting text and must not be preceded by spaces. Otherwise the results may be unexpected. Automatic and Manual Escaping: Depending on the output format, there are often characters that need special treatment. For example,when converting a kramdown document to HTML one needs to take care of the characters &lt;, &gt; and&amp;. To ease working with these special characters, they are automatically and correctly escapeddepending on the output format. This means, for example, that you can just use &lt;, &gt; and &amp; in a kramdown document and need notthink about when to use their HTML entity counterparts. However, if you do use HTML entities orHTML tags which use one of the characters, the result will be correct nonetheless! Since kramdown also uses some characters to mark-up the text, there needs to be a way to escapethese special characters so that they can have their normal meaning. This can be done by usingbackslash escapes. For example, you can use a literal back tick like this: 1This \`is not a code\` span!Following is a list of all the characters (character sequences) that can be escaped: 123456789101112131415161718\     backslash.     period*     asterisk_     underscore+     plus-     minus=     equal sign`     back tick()[]{}&lt;&gt; left and right parens/brackets/braces/angle brackets#     hash!     bang&lt;&lt;    left guillemet&gt;&gt;    right guillemet:     colon|     pipe      double quote'     single quote$     dollar signBlock Boundaries: Some block-level elements have to start and/or end on so called block boundaries, as stated in theirdocumentation. There are two cases where block boundaries come into play:    If a block-level element has to start on a block boundary, it has to be preceded by either ablank line, an EOB marker, a block IAL or it has tobe the first element.     If a block-level element has to end on a block boundary, it has to be followed by either a blankline, an EOB marker, a block IAL or it has to be thelast element.  Structural ElementsAll structural elements are block-level elements and they are used to structure the content. Theycan mark up some text as, for example, a simple paragraph, a quote or as a list item. Blank lines: Any line that just contains white space characters such as spaces and tabs is considered a blankline by kramdown. One or more consecutive blank lines are handled as one empty blank line. Blanklines are used to separate block-level elements from each other and in this case they don’t havesemantic meaning. However, there are some cases where blank lines do have a semantic meaning:  When used in headers – see the headers section When used in code blocks – see the code blocks section When used in lists – see the lists section When used in math blocks – see the math blocks section When used for elements that have to start/end on block boundariesParagraphs: Paragraphs are the most used block-level elements. One or more consecutive lines of text areinterpreted as one paragraph. The first line of a paragraph may be indented up to three spaces, theother lines can have any amount of indentation because paragraphs support linewrapping. In addition to the rules outlined in the section about line wrapping, aparagraph ends when a definition list line is encountered. You can separate two consecutive paragraphs from each other by using one or more blank lines. Noticethat a line break in the source does not mean a line break in the output (due to the lazysyntax)!. If you want to have an explicit line break (i. e. a &lt;br /&gt; tag) you needto end a line with two or more spaces or two backslashes! Note, however, that a line break on thelast text line of a paragraph is not possible and will be ignored. Leading and trailing spaces willbe stripped from the paragraph text. The following gives you an example of how paragraphs look like: 1234567This para line starts at the first column. However,   the following lines can be indented any number of spaces/tabs.  The para continues here.  This is another paragraph, not connected to the above one. But with a hard line break. \\And another one. Headers: kramdown supports so called Setext style and atx style headers. Both forms can be used inside asingle document. Setext Style: Setext style headers have to start on a block boundary with a line of text (theheader text) and a line with only equal signs (for a first level header) or dashes (for a secondlevel header). The header text may be indented up to three spaces but any leading or trailing spacesare stripped from the header text. The amount of equal signs or dashes is not significant, just oneis enough but more may look better. The equal signs or dashes have to begin at the first column. Forexample: 12345678First level header==================Second level header------  Other first level header=Since Setext headers start on block boundaries, this means in most situations that they have to bepreceded by a blank line. However, blank lines are not necessary after a Setext header: 1234567891011This is a normalparagraph. And A Header------------And a paragraph&gt; This is a blockquote. And A Header------------However, it is generally a good idea to also use a blank line after a Setext header because it looksmore appropriate and eases reading of the document.  The original Markdown syntax allows one to omit the blank line before a Setext header. However,this leads to ambiguities and makes reading the document harder than necessary. Therefore it isnot allowed in a kramdown document. An edge case worth mentioning is the following: 123header---paraOne might ask if this represents two paragraphs separated by a horizontal ruleor a second level header and a paragraph. As suggested by the wording in the example, the latter isthe case. The general rule is that Setext headers are processed before horizontal rules. atx Style: atx style headers have to start on a block boundary with a line that containsone or more hash characters and then the header text. No spaces are allowed before the hashcharacters. The number of hash characters specifies the heading level: one hash character gives youa first level heading, two a second level heading and so on until the maximum of six hash charactersfor a sixth level heading. You may optionally use any number of hashes at the end of the line toclose the header. Any leading or trailing spaces are stripped from the header text. For example: 12345# First level header### Third level header  ##### Second level header ###### Again, the original Markdown syntax allows one to omit the blank line before an atx style header. Specifying a Header ID: kramdown supports a nice way for explicitly setting the header ID which is taken from [PHP MarkdownExtra] and [Maruku]: If you follow the header text with an opening curly bracket (separated from thetext with a least one space), a hash, the ID and a closing curly bracket, the ID is set on theheader. If you use the trailing hash feature of atx style headers, the header ID has to go after thetrailing hashes. For example: 123456Hello    {#id}-----# Hello   {#id}# Hello #  {#id} This additional syntax is not part of standard Markdown. Blockquotes: A blockquote is started using the &gt; marker followed by an optional space and the content of theblockquote. The marker itself may be indented up to three spaces. All following lines, whether theyare started with the blockquote marker or just contain text, belong to the blockquote becauseblockquotes support line wrapping. The contents of a blockquote are block-level elements. This means that if you are just using text ascontent that it will be wrapped in a paragraph. For example, the following gives you one blockquotewith two paragraphs in it: 12345&gt; This is a blockquote. &gt;   on multiple linesthat may be lazy. &gt;&gt; This is the second paragraph. Since the contents of a blockquote are block-level elements, you can nest blockquotes and use otherblock-level elements (this is also the reason why blockquotes need to support line wrapping): 123456789&gt; This is a paragraph. &gt;&gt; &gt; A nested blockquote. &gt;&gt; ## Headers work&gt;&gt; * lists too&gt;&gt; and all other block-level elementsNote that the first space character after the &gt; marker does not count when counting spaces forthe indentation of the block-level elements inside the blockquote! So code blockswill have to be indented with five spaces or one space and one tab, like this: 123&gt; A code block:&gt;&gt;   ruby -e 'puts :works'Line wrapping allows one to be lazy but hinders readability and should thereforebe avoided, especially with blockquotes. Here is an example of using blockquotes with line wrapping: 1234567&gt; This is a paragraph insidea blockquote. &gt;&gt; &gt; This is a nested paragraphthat continues here&gt; and here&gt; &gt; and hereCode Blocks: Code blocks can be used to represent verbatim text like markup, HTML or a program fragment becauseno syntax is parsed within a code block. Standard Code Blocks: A code block can be started by using four spaces or one tab and then the text of the code block. Allfollowing lines containing text, whether they adhere to this syntax or not, belong to the code blockbecause code blocks support line wrapping). A wrapped code line is automaticallyappended to the preceding code line by substituting the line break with a space character. Theindentation (four spaces or one tab) is stripped from each line of the code block.  The original Markdown syntax does not allow line wrapping in code blocks. Note that consecutive code blocks that are only separate by blank lines are mergedtogether into one code block: 123  Here comes some code  This text belongs to the same code block. If you want to have one code block directly after another one, you need to use an EOBmarker to separate the two: 123  Here comes some code^  This one is separate. Fenced Code Blocks:  This alternative syntax is not part of the original Markdown syntax. The idea and syntax comesfrom the [PHP Markdown Extra] package. kramdown also supports an alternative syntax for code blocks which does not use indented blocks butdelimiting lines. The starting line needs to begin with three or more tilde characters (~) and theclosing line needs to have at least the number of tildes the starting line has. Everything betweenis taken literally as with the other syntax but there is no need for indenting the text. Forexample: 123~~~~~~~~Here comes some code. ~~~~~~~~If you need lines of tildes in such a code block, just start the code block with more tildes. Forexample: 12345~~~~~~~~~~~~~~~~~~~code with tildes~~~~~~~~~~~~~~~~~~~~~~~~~~This type of code block is especially useful for copy-pasted code since you don’t need to indent thecode. Language of Code Blocks: You can tell kramdown the language of a code block by using an IAL: 123456~~~def what? 42end~~~{: . language-ruby}The specially named class language-ruby tells kramdown that this code block is written in the Rubylanguage. Such information can be used, for example, by converters to do syntax highlighting on thecode block. Fenced code blocks provide an easier way to specify the language, namely by appending the languageof the code block to the end of the starting line: 12345~~~ rubydef what? 42end~~~Lists: kramdown provides syntax elements for creating ordered and unordered lists as well as definitionlists. Ordered and Unordered lists: Both ordered and unordered lists follow the same rules. A list is started with a list marker (in case of unordered lists one of +, - or * – you canmix them – and in case of ordered lists a number followed by a period) followed by one tab or atleast one space, optionally followed by an IAL that should be applied tothe list item and then the first part of the content of the list item. The leading tabs or spacesare stripped away from this first line of content to allow for a nice alignment with the followingcontent of a list item (see below). All following list items with the same marker type (unordered orordered) are put into the same list. The numbers used for ordered lists are irrelevant, an orderedlist always starts at 1. The following gives you an unordered list and an ordered list: 1234567* kram+ down- now1. kram2. down3. now The original Markdown syntax allows the markers of ordered and unordered lists to be mixed, thefirst marker specifying the list type (ordered or unordered). This is not allowed in kramdown. Asstated, the above example will give you two lists (an unordered and an ordered) in kramdown andonly one unordered list in Markdown. The first list marker in a list may be indented up to three spaces. The column number of the firstnon-space character which appears after the list item marker on the same line specifies theindentation that has to be used for the following lines of content of the list item. If there is nosuch character, the indentation that needs to be used is four spaces or one tab. Indented lines maybe followed by lines containing text with any amount of indentation due to linewrapping. Note, however, that in addition to the rules outlined in the sectionabout line wrapping, a list item also ends when a line with another list item marker is encountered– see the next paragraph. The indentation is stripped from the content and the content (note that the content naturally alsocontains the content of the line with the item marker) is processed as text containing block-levelelements. All other list markers in the list may be indented up to three spaces or the number ofspaces used for the indentation of the last list item minus one, whichever number is smaller. Forexample: 12345678910* This is the first line. Since the first non-space characters appears in column 3, all other indented lines have to be indented 2 spaces. However, one could be lazy and not indent a line but this is notrecommended. *    This is the another item of the list. It uses a different number  of spaces for indentation which is okay but should generally be avoided.  * The list item marker is indented 3 spaces which is allowed but should   also be avoided and starts the third list item. Note that the lazy   line in the second list item may make you believe that this is a   sub-list which it isn't! So avoid being lazy!So, while the above is possible and creates one list with three items, it is not advised to usedifferent (marker and list content) indents for same level list items as well as lazy indentation!It is much better to write such a list in the following way: 12345* This is the first list item bla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla bla* This is the another item of the list. bla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla blabla The original Markdown syntax also allows you to indent the marker, however, the behaviour of whathappens with the list items is not clearly specified and may surprise you.  Also, Markdown uses a fixed number of spaces/tabs to indent the lines that belong to a list item! Unordered and ordered lists work the same way in regard to the indentation: 12345* list 1 item 1 * list 1 item 2 (indent 1 space) * list 1 item 3 (indent 2 spaces)  * list 1 item 4 (indent 3 spaces)  * lazy text belonging to above item 4123451. list 1 item 1 2. list 1 item 2 (indent 1 space) 3. list 1 item 3 (indent 2 spaces)  4. list 1 item 4 (indent 3 spaces)  5. lazy text belonging to above item 412345* list 1 item 1 * nested list item 1 * nested list item 2* list 1 item 2 * nested list item 1123451. list 1 item 1  1. nested list item 1  2. nested list item 210. list 1 item 2  1. nested list item 1123451. text for this list item  further text (indent 3 spaces)10. text for this list item  further text (indent 4 spaces)When using tabs for indenting the content of a list item, remember that tab stops occur at multiplesof four for kramdown. Tabs are correctly converted to spaces for calculating the indentation. Forexample: 1234567*  Using a tab to indent this line, the tab only counts as three spaces  and therefore the overall indentation is four spaces.  1.  The tab after the marker counts here as three spaces. Since the    indentation of the marker is three spaces and the marker itself    takes two characters, the overall indentation needed for the    following lines is eight spaces or two tabs. It is clear that you might get unexpected results if you mix tabs and spaces or if you don’t havethe tab stops set to multiples of four in your editor! Therefore this should be avoided! The content of a list item is made up of either text or block-level elements. Simple list items onlycontain text like in the above examples. They are not even wrapped in a paragraph tag. If the firstlist text is followed by one or more blank lines, it will be wrapped in a paragraph tag: 1234* kram* down* nowIn the above example, the first list item text will be wrapped in a paragraph tag since it isfollowed by a blank line whereas the second list item contains just text. There is obviously aproblem for doing this with the last list item when it contains only text. You can circumvent thisby leaving a blank line after the last list item and using an EOB marker: 1234567* Not wrapped in a paragraph* Wrapped in a paragraph due to the following blank line. * Also wrapped in a paragraph due to the following blank line and the EOB marker. ^The text of the last list item is also wrapped in a paragraph tag if all other list items containa proper paragraph as first element. This makes the following use case work like expected, i. e. all the list items are wrapped in paragraphs: 12345* First list item* Second list item* Last list item The original Markdown syntax page specifies that list items which are separated by one or moreblank lines are wrapped in paragraph tags. This means that the first text will also be wrapped ina paragraph if you have block-level elements in a list which are separated by blank lines. Theabove rule is easy to remember and lets you exactly specify when the first list text should bewrapped in a paragraph. The idea for the above rule comes from the [Pandoc] package. As seen in the examples above, blank lines between list items are allowed. Since the content of a list item can contain block-level elements, you can do the following: 123456789*  First item  A second paragraph  * nested list  &gt; blockquote*  Second itemHowever, there is a problem when you want to have a code block immediately after a list item. Youcan use an EOB marker to circumvent this problem: 12345*  This is a list item.   The second para of the list item. ^  A code block following the list item. You can have any block-level element as first element in a list item. However, as described above,the leading tabs or spaces of the line with the list item marker are stripped away. This leads to aproblem when you want to have a code block as first element. The solution to this problem is thefollowing construct: 123*     This is a code block (indentation needs to be 4(1)+4(1)    spaces (tabs)). Note that the list marker needs to be followed with at least one space or tab! Otherwise the line isnot recognized as the start of a list item but interpreted as a paragraph containing the listmarker. If you want to have one list directly after another one (both with the same list type, i. e. orderedor unordered), you need to use an EOB marker to separate the two: 123* List one^* List twoSince paragraphs support line wrapping, it would usually not be possible to createcompact nested list, i. e. a list where the text is not wrapped in paragraphs because there is noblank line but a sub list after it: 123456*  This is just text.   * this is a sub list item   * this is a sub sub list item* This is just text,  spanning two lines * this is a nested list item. However, this is an often used syntax and is therefore support by kramdown. If you want to start a paragraph with something that looks like a list item marker, you need toescape it. This is done by escaping the period in an ordered list or the list item marker in anunordered list: 121984\. It was great\- others say that, too!As mentioned at the beginning, an optional IAL for applying attributes to a list item can be usedafter the list item marker: 1234* {:. cls} This item has the class  cls .  Here continues the above paragraph. * This is a normal list item. Definition Lists:  This syntax feature is not part of the original Markdown syntax. The idea and syntax comes fromthe [PHP Markdown Extra] package. Definition lists allow you to assign one or more definitions to one or more terms. A definition list is started when a normal paragraph is followed by a line with a definition marker(a colon which may be optionally indented up to three spaces), then at least one tab or one space,optionally followed by an IAL that should be applied to the list item andthen the first part of the definition. The line with the definition marker may optionally beseparated from the preceding paragraph by a blank line. The leading tabs or spaces are stripped awayfrom this first line of the definition to allow for a nice alignment with the following definitioncontent. Each line of the preceding paragraph is taken to be a term and the lines separately parsedas span-level elements. Each such term may optionally start with an IALthat should be applied to the term. The following is a simple definition list: 12345kramdown: A Markdown-superset converterMaruku:   Another Markdown-superset converterThe column number of the first non-space character which appears after a definition marker on thesame line specifies the indentation that has to be used for the following lines of the definition. If there is no such character, the indentation that needs to be used is four spaces or one tab. Indented lines may be followed by lines containing text with any amount of indentation due to linewrapping. Note, however, that in addition to the rules outlined in the sectionabout line wrapping, a list item also ends when a line with another definition marker is encountered. The indentation is stripped from the definition and it (note that the definition naturally alsocontains the content of the line with the definition marker) is processed as text containing blocklevel elements. If there is more than one definition, all other definition markers for the term maybe indented up to three spaces or the number of spaces used for the indentation of the lastdefinition minus one, whichever number is smaller. For example: 1234567891011definition term 1definition term 2: This is the first line. Since the first non-space characters appears incolumn 3, all other lines have to be indented 2 spaces (or lazy syntax may be used after an indented line). This tells kramdown that the lines belong to the definition. :    This is the another definition for the same term. It uses a    different number of spaces for indentation which is okay but    should generally be avoided.  : The definition marker is indented 3 spaces which is allowed but   should also be avoided. So, while the above is possible and creates a definition list with two terms and three definitionsfor them, it is not advised to use different (definition marker and definition) indents in the samedefinition list as well as lazy indentation! The definition for a term is made up of text and/or block-level elements. If a definition is notpreceded by a blank line, the first part of the definition will just be text if it would be aparagraph otherwise: 12345678definition term: This definition will just be text because it would normally be a paragraph and the there is no preceding blank line.  &gt; although the definition contains other block-level elements: This definition *will* be a paragraph since it is preceded by a blank line. The rules about having any block-level element as first element in a list item also apply to adefinition. As mentioned at the beginning, an optional IAL for applying attributes to a term or a definition canbe used: 123456{:#term} Term with id= term : {:. cls} Definition with class  cls {:#term1} First term{:#term2} Second term: {:. cls} DefinitionTables:  This syntax feature is not part of the original Markdown syntax. The syntax is based on the onefrom the [PHP Markdown Extra] package. Sometimes one wants to include simple tabular data in a kramdown document for which using afull-blown HTML table is just too much. kramdown supports this with a simple syntax for ASCIItables. Tables can be created with or without a leading pipe character: If the first line of a tablecontains a pipe character at the start of the line (optionally indented up to three spaces), thenall leading pipe characters (i. e. pipe characters that are only preceded by whitespace) are ignoredon all table lines. Otherwise they are not ignored and count when dividing a table line into tablecells. There are four different line types that can be used in a table:    Table rows define the content of a table.   A table row is any line that contains at least one pipe character and is not identified as anyother type of table line! The table row is divided into individual table cells by pipe characters. An optional trailing pipe character is ignored. Note that literal pipe characters need to beescaped except if they occur in code spans or HTML &lt;code&gt; elements!   Header rows, footer rows and normal rows are all done using these table rows. Table cells can onlycontain a single line of text, no multi-line text is supported. The text of a table cell is parsedas span-level elements.   Here are some example table rows:   1234| First cell|Second cell|Third cell| First | Second | Third |First | Second | | Fourth |      Separator lines are used to split the table body into multiple body parts.   A separator line is any line that contains only pipes, dashes, pluses, colons and spaces/tabs andwhich contains at least one dash and one pipe character. The pipe and plus characters can be usedto visually separate columns although this is not needed. Multiple separator lines after anotherare treated as one separator line.   Here are some example separator lines:   123456|----+----|+----|----+|---------||-| :-----: |-|-      The first separator line after at least one table row is treated specially, namely as headerseparator line. It is used to demarcate header rows from normal table rows and/or to set columnalignments. All table rows above the header separator line are considered to be header rows.   The header separator line can be specially formatted to contain column alignment definitions: Analignment definition consists of an optional space/tab followed by an optional colon, one or moredashes, an optional colon and another optional space/tab. The colons of an alignment definitionare used to set the alignment of a column: if there are no colons, the column uses the defaultalignment, if there is a colon only before the dashes, the column is left aligned, if there arecolons before and after the dashes, the column is center aligned and if there is only a colonafter the dashes, the column is right aligned. Each alignment definition sets the alignment forone column, the first alignment definition for the first column, the second alignment definitionfor the second column and so on.   Here are some example header separator lines with alignment definitions:   1234|---+---+---|+ :-: |:------| ---:|| :-: :- -: -:-: | :-      A footer separator line is used to demarcate footer rows from normal table rows. All table rowsbelow the footer separator line are considered to be footer rows.   A footer separator line is like a normal separator line except that dashes are replaced by equalsigns. A footer separator line may only appear once in a table. If multiple footer separator linesare used in one table, only the last is treated as footer separator line, all others are treatedas normal separator lines. Normal separator lines that are used after the footer separator lineare ignored.   Here are some example footer separator lines:   1234|====+====|+====|====+|=========||=   Trailing spaces or tabs are ignored in all cases. To simplify table creation and maintenance,header, footer and normal separator lines need not specify the same number of columns as table rows;even |- and |= are a valid separators. Given the above components, a table is specified by  an optional separator line, optionally followed by zero, one or more table rows followed by a header separator line, one or more table rows, optionally interspersed with separator lines, optionally followed by a footer separator line and zero, one or more table rows and an optional trailing separator line. Also note  that the first line of a table must not have more than three spaces of indentation before thefirst non-space character, that each line of a table needs to have at least one not escaped pipe character so that kramdownrecognizes it as a line belonging to the table and that tables have to start and end on block boundaries! The table syntax differs from the one used in [PHP Markdown Extra] as follows:    kramdown tables do not need to have a table header.   kramdown tables can be structured using separator lines.   kramdown tables can contain a table footer.   kramdown tables need to be separated from other block-level elements.  Here is an example for a kramdown table with a table header row, two table bodies and a table footerrow: 123456789101112|-----------------+------------+-----------------+----------------|| Default aligned |Left aligned| Center aligned | Right aligned ||-----------------|:-----------|:---------------:|---------------:|| First body part |Second cell | Third cell   | fourth cell  || Second line   |foo     | **strong**   | baz      || Third line   |quux    | baz       | bar      ||-----------------+------------+-----------------+----------------|| Second body   |      |         |        || 2 line     |      |         |        ||=================+============+=================+================|| Footer row   |      |         |        ||-----------------+------------+-----------------+----------------|The above example table is rather time-consuming to create without the help of an ASCII tableeditor. However, the table syntax is flexible and the above table could also be written like this: 1234567891011|---| Default aligned | Left aligned | Center aligned | Right aligned|-|:-|:-:|-:| First body part | Second cell | Third cell | fourth cell| Second line |foo | **strong** | baz| Third line |quux | baz | bar|---| Second body| 2 line|===| Footer rowHorizontal Rules: A horizontal rule for visually separating content is created by using three or more asterisks,dashes or underscores (these may not be mixed on a line), optionally separated by spaces or tabs, onan otherwise blank line. The first asterisk, dash or underscore may optionally be indented up tothree spaces. The following examples show different possibilities to create a horizontal rule: 1234567* * *--- _ _ _ _---------------Math Blocks:  This syntax feature is not part of the original Markdown syntax. The idea comes from the [Maruku]and [Pandoc] packages. kramdown has built-in support for block and span-level mathematics written in LaTeX. A math block needs to start and end on block boundaries. It is started usingtwo dollar signs, optionally indented up to three spaces. The math block continues until the nexttwo dollar signs (which may be on the same line or on one of the next lines) that appear at the endof a line, i. e. they may only be followed by whitespace characters. The content of a math block hasto be valid LaTeX math. It is always wrapped inside a \begin{displaymath}. . . \end{displaymath}enviroment except if it begins with a \begin statement. The following kramdown fragment 12345678910111213141516$$\begin{align*} &amp; \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right) = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\ &amp; (x_1, \ldots, x_n) \left( \begin{array}{ccc}   \phi(e_1, e_1) &amp; \cdots &amp; \phi(e_1, e_n) \\   \vdots &amp; \ddots &amp; \vdots \\   \phi(e_n, e_1) &amp; \cdots &amp; \phi(e_n, e_n)  \end{array} \right) \left( \begin{array}{c}   y_1 \\   \vdots \\   y_n  \end{array} \right)\end{align*}$$renders (using Javascript library MathJax) as Using inline math is also easy: just surround your math content with two dollar signs, like with amath block. If you don’t want to start an inline math statement, just escape the dollar signs andthey will be treated as simple dollar signs.  Note that LaTeX code that uses the pipe symbol | in inline math statements may lead to aline being recognized as a table line. This problem can be avoided by using the \vert commandinstead of |! If you have a paragraph that looks like a math block but should actually be a paragraph with just aninline math statement, you need to escape the first dollar sign: 1234567The following is a math block:$$ 5 + 5 $$But next comes a paragraph with an inline math statement:\$$ 5 + 5 $$If you don’t even want the inline math statement, escape the first two dollar signs: 1\$\$ 5 + 5 $$HTML Blocks:  The original Markdown syntax specifies that an HTML block must start at the left margin, i. e. noindentation is allowed. Also, the HTML block has to be surrounded by blank lines. Bothrestrictions are lifted for kramdown documents. Additionally, the original syntax does not allowyou to use Markdown syntax in HTML blocks which is allowed with kramdown. An HTML block is potentially started if a line is encountered that begins with a non-span-level HTMLtag or a general XML tag (opening or closing) which may be indented up to three spaces. The following HTML tags count as span-level HTML tags and won’t start an HTML block if found atthe beginning of an HTML block line: 123a abbr acronym b big bdo br button cite code del dfn em i img inputins kbd label option q rb rbc rp rt rtc ruby samp select small spanstrong sub sup textarea tt varFurther parsing of a found start tag depends on the tag and in which of three possible ways itscontent is parsed:    Parse as raw HTML block: If the HTML/XML tag content should be handled as raw HTML, then onlyHTML/XML tags are parsed from this point onwards and text is handled as raw, unparsed text untilthe matching end tag is found or until the end of the document. Each found tag will be parsed asraw HTML again. However, if a tag has a markdown attribute, this attribute controls parsing ofthis one tag (see below).   Note that the parser basically supports only correct XHTML! However, there are some exceptions. For example, attributes without values (i. e. boolean attributes) are also supported and elementswithout content like &lt;hr /&gt; can be written as &lt;hr&gt;. If an invalid closing tag is found, it isignored.     Parse as block-level elements: If the HTML/XML tag content should be parsed as text containingblock-level elements, the remaining text on the line will be parsed by the block-level parser asif it appears on a separate line (Caution: This also means that if the line consists of thestart tag, text and the end tag, the end tag will not be found!). All following lines are parsedas block-level elements until an HTML block line with the matching end tag is found or until theend of the document.     Parse as span-level elements: If the HTML/XML tag content should be parsed as text containing spanlevel elements, then all text until the next matching end tag or until the end of the documentwill be the content of the tag and will later be parsed by the span-level parser. This also meansthat if the matching end tag is inside what appears to be a code span, it is still used!  If there is text after an end tag, it will be parsed as if it appears on a separate line except wheninside a raw HTML block. Also, if an invalid closing tag is found, it is ignored. Note that all HTML tag and attribute names are converted to lowercase! By default, kramdown parses all block HTML tags and all XML tags as raw HTML blocks. However, thiscan be configured with the parse_block_html. If this is set to true, then syntax parsing in HTMLblocks is globally enabled. It is also possible to enable/disable syntax parsing on a tag per tagbasis using the markdown attribute:    If an HTML tag has an attribute markdown= 0 , then the tag is parsed as raw HTML block.     If an HTML tag has an attribute markdown= 1 , then the default mechanism for parsing syntax inthis tag is used.     If an HTML tag has an attribute markdown= block , then the content of the tag is parsed as blocklevel elements.     If an HTML tag has an attribute markdown= span , then the content of the tag is parsed as spanlevel elements.  The following list shows which HTML tags are parsed in which mode by default when markdown= 1  isapplied or parse_block_html is true:  Parse as raw HTML   1script style math option textarea pre code kbd samp var    Also, all general XML tags are parsed as raw HTML blocks.   Parse as block-level elements   12applet button blockquote body colgroup dd div dl fieldset form iframe limap noscript object ol table tbody thead tfoot tr td ul    Parse as span-level elements   123a abbr acronym address b bdo big cite caption code del dfn dt emh1 h2 h3 h4 h5 h6 i ins kbd label legend optgroup p pre q rb rbcrp rt rtc ruby samp select small span strong sub sup th tt var    Remember that all span-level HTML tags like a or b do not start a HTML block! However, theabove lists also include span-level HTML tags in the case the markdown attribute is used on atag inside a raw HTML block. Here is a simple example input and its HTML output with parse_block_html set to false: 12345This is a para. &lt;div&gt;Something in here. &lt;/div&gt;Other para. 12345&lt;p&gt;This is a para. &lt;/p&gt;&lt;div&gt;Something in here. &lt;/div&gt;&lt;p&gt;Other para. &lt;/p&gt;As one can see the content of the div tag will be parsed as raw HTML block and left alone. However, if the markdown= 1  attribute was used on the div tag, the content would be parsed asblock-level elements and therefore converted to a paragraph. You can also use several HTML tags at once: 123456&lt;div id= content &gt;&lt;div id= layers &gt;&lt;div id= layer1 &gt;This is some text in the `layer1` div. &lt;/div&gt;This is some text in the `layers` div. &lt;/div&gt;&lt;/div&gt;This is a para outside the HTML block. However, remember that if the content of a tag is parsed as block-level elements, the content thatappears after a start/end tag but on the same line, is processed as if it appears on a new line: 123456789&lt;div markdown= 1 &gt;This is the first part of a para,which is continued here. &lt;/div&gt;&lt;p markdown= 1 &gt;This works without problems because it is parsed asspan-level elements&lt;/p&gt;&lt;div markdown= 1 &gt;The end tag is not found becausethis line is parsed as a paragraph&lt;/div&gt;Since setting parse_block_html to true can lead to some not wanted behaviour, it is generallybetter to selectively enable or disable block/span-level elements parsing by using the markdownattribute! Unclosed block-level HTML tags are correctly closed at the end of the document to ensure correctnesting and invalidly used end tags are removed from the output: 1234This is a para. &lt;div markdown= 1 &gt;Another para. &lt;/p&gt;1234&lt;p&gt;This is a para. &lt;/p&gt;&lt;div&gt; &lt;p&gt;Another para. &lt;/p&gt;&lt;/div&gt;The parsing of processing instructions and XML comments is also supported. The content of both, PIsand XML comments, may span multiple lines. The start of a PI/XML comment may only appear at thebeginning of a line, optionally indented up to three spaces. If there is text after the end of a PIor XML comment, it will be parsed as if it appears on a separate line. kramdown syntax in PIs/XMLcomments is not processed: 123456This is a para. &lt;!-- a *comment* --&gt;&lt;? a processing `instruction`  spanning multiple lines?&gt; First part of para,continues here. Text MarkupThese elements are all span-level elements and used inside block-level elements to markup textfragments. For example, one can easily create links or apply emphasis to certain text parts. Note that empty span-level elements are not converted to empty HTML tags but are copied as-is to theoutput. Links and Images: Three types of links are supported: automatic links, inline links and reference links. Automatic Links: This is the easiest one to create: Just surround a web address or an email address with anglebrackets and the address will be turned into a proper link. The address will be used as link targetand as link text. For example: 12Information can be found on the &lt;http://example. com&gt; homepage. You can also mail me: &lt;me. example@example. com&gt;It is not possible to specify a different link text using automatic links – use the other linktypes for this! Inline Links: As the wording suggests, inline links provide all information inline in the text flow. Referencestyle links only provide the link text in the text flow and everything else is definedelsewhere. This also allows you to reuse link definitions. An inline style link can be created by surrounding the link text with square brackets, followedimmediately by the link URL (and an optional title in single or double quotes preceded by at leastone space) in normal parentheses. For example: 123This is [a link](http://rubyforge. org) to a page. A [link](. . /test  local URI ) can also have a title. And [spaces](link with spaces. html)!Notes:    The link text is treated like normal span-level text and therefore is parsed and converted. However, if you use square brackets within the link text, you have to either properly nest them orto escape them. It is not possible to create nested links!   The link text may also be omitted, e. g. for creating link anchors.     The link URL has to contain properly nested parentheses if no title is specified, or the link URLmust be contained in angle brackets (incorrectly nested parentheses are allowed).     The link title may not contain its delimiters and may not be empty.     Additional link attributes can be added by using a span IAL after the inline link,for example:   1This is a [link](http://example. com){:hreflang= de }   Reference Links: To create a reference style link, you need to surround the link text with square brackets (as withinline links), followed by optional spaces/tabs/line breaks and then optionally followed withanother set of square brackets with the link identifier in them. A link identifier may not contain aclosing bracket and, when specified in a link definition, newline characters; it is also not casesensitive, line breaks and tabs are converted to spaces and multiple spaces are compressed into one. For example: 12This is a [reference style link][linkid] to a page. And [this][linkid] is also a link. As is [this][] and [THIS]. If you don’t specify a link identifier (i. e. only use empty square brackets) or completely omit thesecond pair of square brackets, the link text is converted to a valid link identifier by removingall invalid characters and inserting spaces for line breaks. If there is a link definition found forthe link identifier, a link will be created. Otherwise the text is not converted to a link. As with inline links, additional link attributes can be added by using a span IALafter the reference link. Link Definitions: The link definition can be put anywhere in the document. It does not appear in the output. A linkdefinition looks like this: 1[linkid]: http://www. example. com/  Optional Title  Link definitions are, despite being described here, non-content block-level elements. The link definition has the following structure:  The link identifier in square brackets, optionally indented up to three spaces, then a colon and one or more optional spaces/tabs, then the link URL which must contain at least one non-space character, or a left angle bracket,the link URL and a right angle bracket, then optionally the title in single or double quotes, separated from the link URL by one or morespaces or on the next line by itself indented any number of spaces/tabs.  The original Markdown syntax also allowed the title to be specified in parenthesis. This is notallowed for consistency with the inline title. If you have some text that looks like a link definition but should really be a link and some text,you can escape the colon after the link identifier: 12345The next paragraph contains a link and some text. [Room 100]\: There you should find everything you need![Room 100]: link_to_room_100. htmlAlthough link definitions are non-content block-level elements, block IALs can beused on them to specify additional attributes for the links: 12[linkid]: http://example. com{:hreflang= de }Images: Images can be specified via a syntax that is similar to the one used by links. The difference isthat you have to use an exclamation mark before the first square bracket and that the link text of anormal link becomes the alternative text of the image link. As with normal links, image links can bewritten inline or reference style. For example: 123Here comes a ![smiley](. . /images/smiley. png)! And here![too](. . /images/other. png 'Title text'). Or ![here]. With empty alt text ![](see. jpg)The link definition for images is exactly the same as the link definition for normal links. Sinceadditional attributes can be added via span and block IALs, it is possible, for example, to specifyimage width and height: 123456Here is an inline ![smiley](smiley. png){:height= 36px  width= 36px }. And here is a referenced ![smile][smile]: smile. png{: height= 36px  width= 36px }Emphasis: kramdown supports two types of emphasis: light and strong emphasis. Text parts that are surroundedwith single asterisks * or underscores _ are treated as text with light emphasis, text partssurrounded with two asterisks or underscores are treated as text with strong emphasis. Surroundedmeans that the starting delimiter must not be followed by a space and that the stopping delimitermust not be preceded by a space. Here is an example for text with light and strong emphasis: 1234*some text*_some text_**some text**__some text__The asterisk form is also allowed within a single word: 1This is un*believe*able! This d_oe_s not work!Text can be marked up with both light and strong emphasis, possibly using different delimiters. However, it is not possible to nest strong within strong or light within light emphasized text: 1234This is a ***text with light and strong emphasis***. This **is _emphasized_ as well**. This *does _not_ work*. This **does __not__ work either**. If one or two asterisks or underscores are surrounded by spaces, they are treated literally. If youwant to force the literal meaning of an asterisk or an underscore you can backslash-escape it: 123This is a * literal asterisk. These are ** two literal asterisk. As \*are\* these!Code Spans: This is the span-level equivalent of the code block element. You can markup a textpart as code span by surrounding it with backticks `. For example: 1Use `&lt;html&gt;` tags for this. Note that all special characters in a code span are treated correctly. For example, when a code spanis converted to HTML, the characters &lt;, &gt; and &amp; are substituted by their respective HTMLcounterparts. To include a literal backtick in a code span, you need to use two or more backticks as delimiters. You can insert one optional space after the starting and before the ending delimiter (these spacesare not used in the output). For example: 123Here is a literal `` ` `` backtick. And here is `` `some` `` text (note the two spaces so that one is leftin the output!). A single backtick surrounded by spaces is treated as literal backtick. If you want to force theliteral meaning of a backtick you can backslash-escape it: 12This is a ` literal backtick. As \`are\` these!As with code blocks you can set the language of a code span by using anIAL: 1This is a Ruby code fragment `x = Class. new`{:. language-ruby}HTML Spans: HTML tags cannot only be used on the block-level but also on the span-level. Span-level HTML tagscan only be used inside one block-level element, it is not possible to use a start tag in one blocklevel element and the end tag in another. Note that only correct XHTML is supported! This means thatyou have to use, for example, &lt;br /&gt; instead of &lt;br&gt; (although kramdown tries to fix such errorsif possible). By default, kramdown parses kramdown syntax inside span HTML tags. However, this behaviour can beconfigured with the parse_span_html option. If this is set to true, then syntax parsing in HTMLspans is enabled, if it is set to false, parsing is disabled. It is also possible toenable/disable syntax parsing on a tag per tag basis using the markdown attribute:    If an HTML tag has an attribute markdown= 0 , then no parsing (except parsing of HTML span tags)is done inside that HTML tag.     If an HTML tag has an attribute markdown= 1 , then the content of the tag is parsed as spanlevel elements.     If an HTML tag has an attribute markdown= block , then a warning is issued because HTML spanscannot contain block-level elements and the attribute is ignored.     If an HTML tag has an attribute markdown= span , then the content of the tag is parsed as spanlevel elements.  The content of a span-level HTML tag is normally parsed as span-level elements. Note, however, thatsome tags like &lt;script&gt; are not parsed, i. e. their content is not modified. Processing instructions and XML comments can also be used (their content is not parsed). However, aswith HTML tags the start and the end have to appear in the same block-level element. Span-level PIs and span-level XML comments as well as general span-level HTML and XML tags have tobe preceded by at least one non whitespace character on the same line so that kramdown correctlyrecognizes them as span-level element and not as block-level element. However, all span HTML tags,i. e. a, em, b, …, (opening or closing) can appear at the start of a line. Unclosed span-level HTML tags are correctly closed at the end of the span-level text to ensurecorrect nesting and invalidly used end tags or block HTML tags are removed from the output: 123This is &lt;/invalid&gt;. This &lt;span&gt;is automatically closed. 123&lt;p&gt;This is . &lt;/p&gt;&lt;p&gt;This &lt;span&gt;is automatically closed. &lt;/span&gt;&lt;/p&gt;Also note that one or more consecutive new line characters in an HTML span tag are replaced by asingle space, for example: 12Link: &lt;a href= somelink &gt;text&lt;/a&gt;1&lt;p&gt;Link: &lt;a href= some link &gt;text&lt;/a&gt;&lt;/p&gt;Footnotes:  This syntax feature is not part of the original Markdown syntax. The idea and syntax comes fromthe [PHP Markdown Extra] package. Footnotes in kramdown are similar to reference style links and link definitions. You need to placethe footnote marker in the correct position in the text and the actual footnote content can bedefined anywhere in the document. More exactly, a footnote marker can be created by placing the footnote name in square brackets. The footnote name has to start with a caret (^), followed by a word character or a digit and thenoptionally followed by other word characters, digits or dashes. For example: 1This is some text. [^1]. Other text. [^footnote].  Note that footnote markers cannot be used as part of the link text of a link because this wouldlead to nested links which is not allowed in HTML. Footnote markers with the same name will link to the same footnote definition. The actual naming ofa footnote does not matter since the numbering of footnotes is controlled via the position of thefootnote markers in the document (the first found footnote marker will get the number 1, the second new footnote marker the number 2 and so on). If there is a footnote definition found for theidentifier, a footnote will be created. Otherwise the footnote marker is not converted to a footnotelink. Also note that all attributes set via a span IAL are ignored for a footnote marker! A footnote definition is used to define the content of a footnote and has the following structure:  The footnote name in square brackets, optionally indented up to three spaces, then a colon and one or more optional spaces, then the text of the footnote and optionally more text on the following lines which have to follow the syntax for standard codeblocks (the leading four spaces/one tab are naturally stripped from thetext) Footnote definitions are, despite being described here, non-content block-level elements. The whole footnote content is treated like block-level text and can therefore contain any validblock-level element (also, any block-level element can be the first element). If you want to have acode block as first element, note that all leading spaces/tabs on the first line are stripped away. Here are some example footnote definitions: 12345678910111213[^1]: Some *crazy* footnote definition. [^footnote]:  &gt; Blockquotes can be in a footnote.     as well as code blocks  or, naturally, simple paragraphs. [^other-note]:    no code block here (spaces are stripped away)[^codeblock-note]:    this is now a code block (8 spaces indentation)It does not matter where you put a footnote definition in a kramdown document; the content of allreferenced footnote definitions will be placed at the end of the kramdown document. Not referencedfootnote definitions are ignored. If more than one footnote definitions have the same footnote name,all footnote definitions but the last are ignored. Although footnote definitions are non-content block-level elements, block IALs can beused on them to attach attributes. How these attributes are used depends on the converter. Abbreviations:  This syntax feature is not part of the original Markdown syntax. The idea and syntax comes fromthe [PHP Markdown Extra] package. kramdown provides a syntax to assign the full phrase to an abbreviation. When writing the text, youdon’t need to do anything special. However, once you add abbreviation definitions, theabbreviations in the text get marked up automatically. Abbreviations can consist of any characterexcept a closing bracket. An abbreviation definition is used to define the full phrase for an abbreviation and has thefollowing structure:  An asterisk and the abbreviation in square brackets, optionally indented up to threespaces, then a colon and the full phrase of the abbreviation on one line (leading and trailing spaces arestripped from the full phrase). Later abbreviation definitions for the same abbreviation override prior ones and it does not matterwhere you put an abbreviation definition in a kramdown document. Empty definitions are also allowed. Although abbreviation definitions are non-content block-level elements, block IALscan be used on them to specify additional attributes. Here are some examples: 123456This is some text not written in HTML but in another language!*[another language]: It's called Markdown*[HTML]: HyperTextMarkupLanguage{:. mega-big} Abbreviation definitions are, despite being described here, non-content block-level elements. Typographic Symbols:  The original Markdown syntax does not support these transformations. kramdown converts the following plain ASCII character into their corresponding typographic symbols:  --- will become an em-dash (like this —) -- will become an en-dash (like this –) . . . will become an ellipsis (like this …) &lt;&lt; will become a left guillemet (like this «) – an optional following space will become anon-breakable space &gt;&gt; will become a right guillemet (like this ») – an optional leading space will become anon-breakable spaceThe parser also replaces normal single ' and double quotes   with “fancy quotes”. There may betimes when kramdown falsely replace the quotes. If this is the case, just 'escape  the quotes andthey won’t be replaced with fancy ones. Non-content elementsThis section describes the non-content elements that are used in kramdown documents, i. e. elementsthat don’t provide content for the document but have other uses such as separating block-levelelements or attaching attributes to elements. Three non-content block-level elements are not described here because they fit better where theyare:  link definitions footnote definitions abbreviation definitionEnd-Of-Block Marker:  The EOB marker is not part of the standard Markdown syntax. The End-Of-Block (EOB) marker – a ^ as first character on an otherwise empty line – is a blocklevel element that can be used to specify the end of a block-level element even if the block-levelelement, after which it is used, would continue otherwise. If there is no block-level element toend, the EOB marker is simply ignored. You won’t find an EOB marker in most kramdown documents but sometimes it is necessary to use it toachieve the wanted results which would be impossible otherwise. However, it should only be used whenabsolutely necessary! For example, the following gives you one list with two items: 123* list item one* list item twoBy using an EOB marker, you can make two lists with one item each: 123* list one^* list twoAttribute List Definitions:  This syntax feature is not part of the original Markdown syntax. The idea and syntax comes fromthe [Maruku] package. This is an implementation of [Maruku]’s feature for adding attributes to block and span-levelelements (the naming is also taken from Maruku). This block-level element is used to defineattributes which can be referenced later. The Block Inline Attribute List is used toattach attributes to a block-level element and the Span Inline Attribute List is usedto attach attributes to a span-level element. Following are some examples of attribute list definitions (ALDs) and afterwards comes the syntaxexplanation: 123{:ref-name: #myid . my-class}{:other: ref-name #id-of-other title= hallo you }{:test: key= value \  with quote  and other='quote brace \}'}An ALD line has the following structure:  a left brace, optionally preceded by up to three spaces, followed by a colon, the reference name and another colon, followed by attribute definitions (allowed characters are backslash-escaped closing braces or anycharacter except a not escaped closing brace), followed by a closing brace and optional spaces until the end of the line. The reference name needs to start with a word character or a digit, optionally followed by otherword characters, digits or dashes. There are four different types of attribute definitions which have to be separated by one or morespaces:  references   This must be a valid reference name. It is used to reference an other ALD so that the attributesof the other ALD are also included in this one. The reference name is ignored when collecting theattributes if no attribute definition list with this reference name exists. For example, a simplereference looks like id.   key-value pairs   A key-value pair is defined by a key name, which must follow the rules for reference names, thenan equal sign and then the value in single or double quotes. If you need to use the valuedelimiter (a single or a double quote) inside the value, you need to escape it with a backslash. Key-value pairs can be used to specify arbitrary attributes for block or span-level elements. Forexample, a key-value pair looks like key1= bef \ quoted\  aft  or title='This is a title'.   ID name   An ID name is defined by using a hash and then the identifier name which needs to start with anASCII alphabetic character (A-Z or a-z), optionally followed by other ASCII characters, digits,dashes or colons. This is a short hand for the key-value pair id= IDNAME  since this is oftenused. The ID name specifies the unique ID of a block or span-level element. For example, an IDname looks like #myid.   class names   A class name is defined by using a dot and then the class name which may contain any characterexcept whitespace, the dot character and the hash character.   This is (almost, but not quite) a short hand for the key-value pair class= class-name . Almostbecause it actually means that the class name should be appended to the current value of theclass attribute. The following ALDs are all equivalent:   1234{:id: . cls1 . cls2}{:id: class= cls1  . cls2}{:id: class= something  class= cls1  . cls2}{:id: class= cls1 cls2 }   As can be seen from the example of the class names, attributes that are defined earlier areoverwritten by ones with the same name defined later.  Also, everything in the attribute definitions part that does not match one of the above four typesis ignored. If there is more than one ALD with the same reference name, the attribute definitions of all theALDs are processed like they are defined in one ALD. Inline Attribute Lists: These elements are used to attach attributes to another element. Block Inline Attribute Lists:  This syntax feature is not part of the original Markdown syntax. The idea and syntax comes fromthe [Maruku] package. This block-level element is used to attach attributes to another block-level element. A block inlineattribute list (block IAL) has the same structure as an ALD exceptthat the colon/reference name/colon part is replaced by a colon. A block IAL (or two or more blockIALs) has to be put directly before or after the block-level element to which the attributes shouldbe attached. If a block IAL is directly after and before a block-level element, it is applied topreceding element. The block IAL is ignored in all other cases, for example, when the block IAL issurrounded by blank lines. Key-value pairs of an IAL take precedence over equally named key-value pairs in referenced ALDs. Here are some examples for block IALs: 123456789A simple paragraph with an ID attribute. {: #para-one}&gt; A blockquote with a title{:title= The blockquote title }{: #myid}{:. ruby}  Some code hereSpan Inline Attribute Lists:  This syntax feature is not part of the original Markdown syntax. The idea and syntax comes fromthe [Maruku] package. This is a version of the block inline attribute list for span-level elements. It hasthe same structure as the block IAL except that leading and trailing spaces are not allowed. A spanIAL (or two or more span IALs) has to be put directly after the span-level element to which itshould be applied, no additional character is allowed between, otherwise it is ignored and onlyremoved from the output. Here are some examples for span IALs: 12This *is*{:. underline} some `code`{:#id}{:. class}. A [link](test. html){:rel='something'} and some **tools**{:. tools}. The special span IAL {::} contains no attributes but doesn’t generate a warning either. It can beused to separate consecutive elements that would be falsely parsed if not separated. Here is an usecase: 1This *is italic*{::}*marked*{:. special} textExtensions:  This syntax feature is not part of the original Markdown syntax. Extensions provide additional functionality but use the same syntax for it. They are available asblock as well as span-level elements. The syntax for an extension is very similar to the syntax of ALDs. Here are some examples of how to specify extensions and afterwards is the syntax definition: 12345678{::comment}This text is completely ignored by kramdown - a comment in the text. {:/comment}Do you see {::comment}this text{:/comment}?{::comment}some other comment{:/}{::options key= val  /}An extension can be specified with or without a body. Therefore there exist a start and an end tagfor extensions. The start tag has the following structure:  a left brace, followed by two colons and the extension name, optionally followed by a space and attribute definitions (allowed characters are backslash-escapedclosing braces or any character except a not escaped closing brace – same as with ALDs), followed by a slash and a right brace (in case the extension has no body) or only a rightbrace (in case the extension has a body). The stop tag has the following structure:  a left brace, followed by a colon and a slash, optionally followed by the extension name, followed by a right brace. A stop tag is only needed if the extension has a body! The above syntax can be used as is for span-level extensions. The starting and ending lines for block-levelextensions are defined as:  The starting line consists of the extension start tag, optionally preceded by up to three spaces,and followed by optional spaces until the end of the line.  The ending line consists of the extension stop tag, optionally preceded by up to three spaces,and followed by optional spaces until the end of the line. If no end tag can be found for an extension start tag, the start tag is treated as if it has nobody. If an invalid extension stop tag is found, it is ignored. If an invalid extension name isspecified the extension (and the eventually specified body) are ignored. The following extensions can be used with kramdown:  comment   Treat the body text as a comment which does not show in the output.   nomarkdown   Don’t process the body with kramdown but output it as-is. The attribute type specifies whichconverters should output the body: if the attribute is missing, all converters should output it. Otherwise the attribute value has to be a space separated list of converter names and theseconverters should output the body.   options   Should be used without a body since the body is ignored. Is used for setting the global optionsfor the kramdown processor (for example, to disable automatic header ID generation). Note thatoptions that are used by the parser are immediately effective whereas all other options are not!This means, for example, that it is not possible to set converter options only for some part of akramdown document.  {include_file: doc/links. markdown} "
    }, {
    "id": 27,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-sitemap-1.2.0/spec/fixtures/some-subfolder/test_index/",
    "title": "",
    "body": "The permalink of this page does not end with a ‘/’, but with a filename "
    }, {
    "id": 28,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/kramdown-1.17.0/doc/tests.page",
    "title": "Tests and Benchmark",
    "body": "Tests and BenchmarkTests: There exist several test suites for testing the correctness of a Markdown implementation. Theoriginal Markdown Test Suite is the standard which one needs to test against. The PHP Markdownsuite contains the original test suite and several more tests (some specifically gearedtowards the extension of the PHP Markdown Extra package). I have used the latter test tool toroughly verify that kramdown is able to parse standard Markdown. However, since the syntax used bykramdown varies slightly from standard Markdown most of the tests fail - which is fine. When lookingat the differences one can see that the failures result from these differences. Besides using the above mentioned test suite kramdown comes with its own set of tests which is usedto verify that the implementation matches the kramdown specification. If you believe you have found a bug in the implementation, please follow these steps:    Check the syntax page and see if the behaviour is not intended.     If the behaviour is not intended and it seems that kramdown should parse some text in anotherfashion, please open a bug report and attach two files: one with the text and one with the HTMLconversion you think is correct.  Benchmark: kramdown comes with a small benchmark to test how fast it is in regard to four other Ruby Markdownimplementations: Maruku, BlueFeather, BlueCloth, RDiscount and Redcarpet. The first two are writtenusing only Ruby, the latter three are written in C and need to be compiled. As one can see below, kramdown is currently (September 2014) ~3x faster than Maruku, ~4. 5x fasterthan BlueFeather but ~30x slower than RDiscount and ~150x slower than Redcarpet: Running tests on 2014-09-16 under ruby 2. 1. 2p95 (2014-05-08 revision 45877) [x86_64-linux]Test using file mdsyntax. text and 20 runsRehearsal ----------------------------------------------------kramdown 1. 4. 2   0. 900000  0. 010000  0. 910000 ( 0. 914992)Maruku 0. 7. 1    2. 360000  0. 040000  2. 400000 ( 2. 403571)BlueFeather 0. 41  3. 760000  0. 010000  3. 770000 ( 3. 776421)BlueCloth 2. 2. 0  0. 050000  0. 000000  0. 050000 ( 0. 050221)RDiscount 2. 1. 7  0. 020000  0. 000000  0. 020000 ( 0. 024180)redcarpet 3. 1. 2  0. 010000  0. 000000  0. 010000 ( 0. 004579)------------------------------------------- total: 7. 160000sec            user   system   total    realkramdown 1. 4. 2   0. 830000  0. 000000  0. 830000 ( 0. 834144)Maruku 0. 7. 1    2. 250000  0. 030000  2. 280000 ( 2. 286579)BlueFeather 0. 41  3. 680000  0. 010000  3. 690000 ( 3. 693769)BlueCloth 2. 2. 0  0. 050000  0. 000000  0. 050000 ( 0. 044831)RDiscount 2. 1. 7  0. 020000  0. 000000  0. 020000 ( 0. 022847)redcarpet 3. 1. 2  0. 010000  0. 000000  0. 010000 ( 0. 004601)Real time of X divided by real time of kramdownMaruku       2. 7412BlueFeather    4. 4282BlueCloth     0. 0537RDiscount     0. 0274redcarpet     0. 0055Test using file mdbasics. text and 20 runsRehearsal ----------------------------------------------------kramdown 1. 4. 2   0. 150000  0. 000000  0. 150000 ( 0. 149989)Maruku 0. 7. 1    0. 580000  0. 010000  0. 590000 ( 0. 584910)BlueFeather 0. 41  0. 780000  0. 000000  0. 780000 ( 0. 788740)BlueCloth 2. 2. 0  0. 020000  0. 000000  0. 020000 ( 0. 014700)RDiscount 2. 1. 7  0. 000000  0. 000000  0. 000000 ( 0. 007692)redcarpet 3. 1. 2  0. 010000  0. 000000  0. 010000 ( 0. 002064)------------------------------------------- total: 1. 550000sec            user   system   total    realkramdown 1. 4. 2   0. 150000  0. 000000  0. 150000 ( 0. 151586)Maruku 0. 7. 1    0. 520000  0. 000000  0. 520000 ( 0. 525707)BlueFeather 0. 41  0. 770000  0. 010000  0. 780000 ( 0. 763559)BlueCloth 2. 2. 0  0. 020000  0. 000000  0. 020000 ( 0. 015509)RDiscount 2. 1. 7  0. 010000  0. 000000  0. 010000 ( 0. 006545)redcarpet 3. 1. 2  0. 000000  0. 000000  0. 000000 ( 0. 001475)Real time of X divided by real time of kramdownMaruku       3. 468BlueFeather    5. 0371BlueCloth     0. 1023RDiscount     0. 0432redcarpet     0. 0097And here are some graphs which show the execution times of the various kramdown releases ondifferent Ruby interpreters: "
    }, {
    "id": 29,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/jekyll-sitemap-1.2.0/spec/fixtures/some-subfolder/this-is-a-subpage/",
    "title": "",
    "body": "This is a subpage! "
    }, {
    "id": 30,
    "url": "http://localhost:4000/mediumish-theme-jekyll/vendor/bundle/ruby/2.5.0/gems/rouge-3.3.0/lib/rouge/demos/yaml",
    "title": "",
    "body": "one: Mark McGwiretwo: Sammy Sosathree: Ken Griffey "
    }, {
    "id": 31,
    "url": "http://localhost:4000/mediumish-theme-jekyll/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 32,
    "url": "http://localhost:4000/mediumish-theme-jekyll/page2/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 33,
    "url": "http://localhost:4000/mediumish-theme-jekyll/page3/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 34,
    "url": "http://localhost:4000/mediumish-theme-jekyll/page4/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 35,
    "url": "http://localhost:4000/mediumish-theme-jekyll/page5/",
    "title": "Home",
    "body": "{% if page. url == “/” %}       Featured:       {% for post in site. posts %}    {% if post. featured == true %}      {% include featuredbox. html %}    {% endif %}  {% endfor %}  {% endif %}       All Stories:         {% for post in paginator. posts %}    {% include postbox. html %}    {% endfor %}    {% include pagination. html %}"
    }, {
    "id": 36,
    "url": "http://localhost:4000/mediumish-theme-jekyll/delete-element-from-slice/",
    "title": "Howto propoerly delete an element from a slice in Go",
    "body": "2020/07/15 - Properly delete an element from a slice in GoArrays and slices in Go are a bit different from analogous structrures in other languages (like list in Python). An arrays is contigious container that holds the values, while the slice just holds pointers to the start and the endof a region of the container that we’re concerned about. Learn more about slices and arrays in Go here. This makes deleting a value from a slice a bit tricky. There are two ways this can be achieved, depending on whether we want to keep the order of values in the array or not. If we want to keep the order of the values, we can slice the array up to the element we want to remove, then append allelements after the that: 123456789arr := []string{ a ,  b ,  c ,  d ,  e ,  f }// we want to remove the thrid element  c i := 2arr = append(arr[:i], arr[i+1:]. . . )fmt. Println(arr)// [a b d e f]Note that we used the expansion expression . . . and we’re adding the elements from the slice. This gets the job done, but is not very efficient. However the order of the elements will be preserved. If we don’t care about the order of elements, we can swap the element we want to remove with the last element of the slice,then make the slice to be one element shorter: 123456789101112arr := []string{ a ,  b ,  c ,  d ,  e ,  f }// we want to remove the thrid element  c i := 2arr[i] = arr[len(arr) - 1]arr = arr[:len(arr) - 1]fmt. Println(arr)// [a b f d e]//  c  is not in the slice, but the order is not preservedThis approach is much faster than the previous approach, but does not preserve the order of elements. What is happening behind the scene: remember that in Go, arrays are the container holding the values, and the slice is justa structure that points to the start and the end of the part of the array we’re concerned about? In the second case what wedid was the following: We started with something like this: 12345  array: [ a ][ b ][ c ][ d ][ e ][ f ]    ↑             ↑    | ┌-----------------------┘slice (0, 5) start at 0 and end at 5the slice starts at the 0th element and ends at the 5th element. The array is the background container holding the values. After we swap out “c” with “f”, we then set the slice end at 4 and end up with something likie this: 1234567          ┌---- swap ----┐          ↓       ↓array: [ a ][ b ][ f ][ d ][ e ][ c ]    ↑           ↑    | ┌------------------┘slice (0, 4) start at 0 and end at 4Now the slice ends at the 4th element. Note that the array still holds 6 values, however our slice only “sees” 5. "
    }, {
    "id": 37,
    "url": "http://localhost:4000/mediumish-theme-jekyll/travis-timeouts-wait/",
    "title": "How to increase Travis CI timeout?",
    "body": "2018/01/11 - There are different use cases where Travis jobs could raise the timeout error. Maybe you are trying to install a Python module that takes some time before installing the dependencies e. g: 12install:  pip install torchor you are running the Java project tests e. g 12script:  mvn package -Dtestng=test. xmlor pushing a new image to the Docker registry e. g 12script:  docker push $APPLICATION:$IMAGE_VERSION;The default Travis job timeout is set to 10 min, so in some scenarios the above commands will fail with: 1Timeout (20 minutes) reached. Terminating  . . .  To increase the timeouts travis ci offers a function that will increase the build timeouts: 1install: travis_wait N mvn installThe travis_wait n where the n is the minutes by which the waiting time is increased.  Note: You must carefully use travis_wait since it can extend the build time when there could happen another issue. "
    }, {
    "id": 38,
    "url": "http://localhost:4000/mediumish-theme-jekyll/author-reference/",
    "title": "Author Reference",
    "body": "2016/04/25 - April the twenty-fifth?"
    }, {
    "id": 39,
    "url": "http://localhost:4000/mediumish-theme-jekyll/2016/04/03/%E9%94%99%E8%AF%AF.html",
    "title": "错误",
    "body": "2016/04/03 - "
    }, {
    "id": 40,
    "url": "http://localhost:4000/mediumish-theme-jekyll/2016/04/02/错误.html",
    "title": "错误",
    "body": "2016/04/02 - "
    }, {
    "id": 41,
    "url": "http://localhost:4000/mediumish-theme-jekyll/%E9%94%99%E8%AF%AF/",
    "title": "错误",
    "body": "2016/04/01 - "
    }, {
    "id": 42,
    "url": "http://localhost:4000/mediumish-theme-jekyll/stuck-in-the-middle/",
    "title": "Stuck In The Middle",
    "body": "2015/08/08 - "
    }, {
    "id": 43,
    "url": "http://localhost:4000/mediumish-theme-jekyll/author-detail/",
    "title": "Author Detail",
    "body": "2015/05/18 - December the twelfth, actually. "
    }, {
    "id": 44,
    "url": "http://localhost:4000/mediumish-theme-jekyll/pre/",
    "title": "Pre",
    "body": "2015/05/12 - Line 1Line 2Line 3"
    }, {
    "id": 45,
    "url": "http://localhost:4000/mediumish-theme-jekyll/liquid/",
    "title": "Liquid",
    "body": "2015/05/12 - Liquid is rendered. "
    }, {
    "id": 46,
    "url": "http://localhost:4000/mediumish-theme-jekyll/strip-newlines/",
    "title": "The plugin will properly strip newlines.",
    "body": "2015/02/12 - "
    }, {
    "id": 47,
    "url": "http://localhost:4000/mediumish-theme-jekyll/jekyll-last-modified-at/",
    "title": "Jekyll Last Modified At",
    "body": "2015/01/18 - Please don’t modify this file. It’s modified time is important. "
    }, {
    "id": 48,
    "url": "http://localhost:4000/mediumish-theme-jekyll/jekyll-last-modified-at/",
    "title": "Jekyll Last Modified At",
    "body": "2015/01/18 - Please don’t modify this file. It’s modified time is important. "
    }, {
    "id": 49,
    "url": "http://localhost:4000/mediumish-theme-jekyll/oh-yes/",
    "title": "Oh Yes",
    "body": "2014/05/25 - "
    }, {
    "id": 50,
    "url": "http://localhost:4000/mediumish-theme-jekyll/whateva/",
    "title": "Whateva",
    "body": "2014/05/24 - "
    }, {
    "id": 51,
    "url": "http://localhost:4000/mediumish-theme-jekyll/hey-there/",
    "title": "Hey There",
    "body": "2014/05/23 - "
    }, {
    "id": 52,
    "url": "http://localhost:4000/mediumish-theme-jekyll/humor/",
    "title": "Humor",
    "body": "2014/05/22 - "
    }, {
    "id": 53,
    "url": "http://localhost:4000/mediumish-theme-jekyll/bleh/",
    "title": "Bleh",
    "body": "2014/05/21 - "
    }, {
    "id": 54,
    "url": "http://localhost:4000/mediumish-theme-jekyll/blah/",
    "title": "Blah",
    "body": "2014/05/20 - "
    }, {
    "id": 55,
    "url": "http://localhost:4000/mediumish-theme-jekyll/exclude-this-post/",
    "title": "Exclude This Post",
    "body": "2014/05/11 - This post should not appear in the sitemap. "
    }, {
    "id": 56,
    "url": "http://localhost:4000/mediumish-theme-jekyll/march-the-fourth/",
    "title": "March The Fourth",
    "body": "2014/03/04 - March the fourth! "
    }, {
    "id": 57,
    "url": "http://localhost:4000/mediumish-theme-jekyll/march-the-fourth/",
    "title": "March The Fourth",
    "body": "2014/03/04 - March the fourth! "
    }, {
    "id": 58,
    "url": "http://localhost:4000/mediumish-theme-jekyll/march-the-second/",
    "title": "March The Second",
    "body": "2014/03/02 - March the second! "
    }, {
    "id": 59,
    "url": "http://localhost:4000/mediumish-theme-jekyll/march-the-second/",
    "title": "March The Second",
    "body": "2014/03/02 - March the second! "
    }, {
    "id": 60,
    "url": "http://localhost:4000/mediumish-theme-jekyll/dec-the-second/",
    "title": "Dec The Second",
    "body": "2013/12/12 - December the twelfth, actually. "
    }, {
    "id": 61,
    "url": "http://localhost:4000/mediumish-theme-jekyll/dec-the-second/",
    "title": "Dec The Second",
    "body": "2013/12/12 - December the twelfth, actually. "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});